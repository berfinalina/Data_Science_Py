import pandas as pd
import os

#####  Merging 12 months of sales into a single file.  #####
df = pd.read_csv("Sales_Data/Sales_April_2019.csv")

files = [file for file in os.listdir('./Sales_Data') if file.endswith('.csv')]
all_months_data = pd.DataFrame()
for file in files:
     df = pd.read_csv(f"./Sales_Data/{file}")
     all_months_data = pd.concat([all_months_data, df], ignore_index=True)
    
all_months_data.to_csv("all_data.csv", index=False) 

#####  Read in updated frame. #####
all_data = pd.read_csv("all_data.csv")
print(all_data)


##### Identify and print rows with NaN values
nan_df = all_data[all_data.isna().any(axis=1)]

##### Drop rows with all NaN values
all_data = all_data.dropna(how='all')

 ###### Remove rows where 'Order Date' starts with 'Or'
all_data = all_data[~(all_data['Order Date'].str[0:2] == 'Or')]

##### Convert columns to the correct type for calculate sales. #####
all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'], errors='coerce')
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'], errors='coerce')


#####  Add "Month" Column  #####
all_data['Month'] = all_data['Order Date'].str[0:2]
all_data['Month'] = all_data['Month'].astype('int32')
print(all_data)


#####  Add "Total Sales" Column  #####
all_data['Total Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']
print(all_data)

#####  WHAT IS THE BEST MONTH OF SALES? HOW MUCH WAS EARNED THAT MONTH?  #####
result = all_data[all_data['Month'] != 'Order ID'].groupby('Month').agg({
    'Quantity Ordered': 'sum',
    'Price Each': 'sum',
    'Total Sales': 'sum' })
print(result)


#####  PLOT THE MONTHLY SALES  #####
import matplotlib.pyplot as plt
months = range(1, 13)
plt.bar(months, result['Total Sales'])
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.title('Total Sales per Month')
plt.show()


#####  Add "City" Column  #####
def get_city(address):
     return address.split(',')[1]

def get_state(address):
     return address.split(',')[2].split(' ')[1]


all_data['City'] = all_data['Purchase Address'].apply(lambda x: f"{get_city(x)} ({get_state(x)})")
print(all_data)
     

#####  WHICH CITY HAS A HIGHEST NUMBER OF SALES?  #####
result = all_data[all_data['City'] != 'Order ID'].groupby('City').agg({
    'Quantity Ordered': 'sum',
    'Price Each': 'sum',
    'Total Sales': 'sum' })
print(result)

#####  PLOT THE MONTHLY SALES by CITY  #####
import matplotlib.pyplot as plt

cities = all_data['City'].unique()
plt.bar(cities, result['Total Sales'])
plt.xticks(cities,rotation='vertical', size=7)
plt.xlabel('City')
plt.ylabel('Total Sales')
plt.title('Total Sales per Month by CITIES')
plt.show()

#####  WHAT TIME SHOULD WE DISPLAY ADVERTISEMENTS TO MAXIMIZE LIKEHOOD of COSTUMER'S BUYING PRODUCT?  #####
all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])
all_data['Hour'] = all_data['Order Date'].dt.hour
all_data['Minute'] = all_data['Order Date'].dt.minute
all_data['Count'] = 1
print(all_data)

#####  PLOT THE MONTHLY SALES by HOUR  #####
hours = [hour for hour, df in all_data.groupby('Hour')]
plt.plot(hours, all_data.groupby(['Hour']).count())
plt.xticks(hours)
plt.xlabel('Hour')
plt.ylabel('Number of Orders')
plt.grid()
plt.show()

#####  WHAT PRODUCTS ARE MOST OFTEN SOLD TOGETHER?  #####
df = all_data[all_data['Order ID'].duplicated(keep = False)]
df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))
df = df[['Order ID', 'Grouped']].drop_duplicates()

from itertools import combinations
from collections import Counter
count = Counter()

for row in df['Grouped']:
     row_list = row.split(',')
     count.update(Counter(combinations(row_list,2)))
     
for key, value in count.most_common(10):
     print((key,value))

#####  WHAT PRODUCT SOLD THE MOST?  #####
product_group = all_data.groupby('Product')
quantity_ordered = product_group['Quantity Ordered'].sum()

print(quantity_ordered)

#####  PLOT OF THE MOST SOLD PRODUCT  #####
products = [product for product, df in product_group]
plt.bar(products, quantity_ordered)
plt.ylabel('Quantity Ordered')
plt.xlabel('Product')
plt.xticks(products, rotation = 'vertical', size=7)
plt.show()

#####  OVERLAYING A SECOND Y-AXIS ON EXISTING CHART ON PLOT #####
prices = product_group['Price Each'].mean()
products = quantity_ordered.index
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.bar(products, quantity_ordered, color='g')
ax2.plot(products, prices, 'b-')
ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantity Ordered', color='g')
ax2.set_ylabel('Price', color='b')
ax1.set_xticks(range(len(products)))
ax1.set_xticklabels(products, rotation='vertical', size=7)
plt.show()
